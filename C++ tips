1.stack
    stack<Type> stk;
    stk.size();
    stk.top();
    stk.pop();  删除元素并不会返回值
    stk.push();
    
2.priority_queue
    priority_queue默认构建的是max_heap
    第一个参数是数据类型，第二个参数是保存数据的容器，第三个参数为比较的方式。
    搭建存储pair的min_heap
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> pq;
    构建max_heap
    priority_queue<pair<int,int>, vector<pair<int,int>>, less<pair<int,int>> pq;
    
    常用操作：
    pq.push();
    pq.top();
    pq.pop();
    
    也可以自定义比较函数
    using mp = pair<int, int>;
    auto f = [](mp &p1, mp &p2){ return p1.first > p2.first;};
    priority_queue<mp, vector<mp>, decltype(f)> pq(f);
    
    也可以自定义一个比较类
    class Solution {
    public:
        vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
            priority_queue<vector<int>, vector<vector<int>>, Compare> pq(points.begin(), points.end());
            vector<vector<int>> ans;
            for (int i = 0; i < K; i++) {
                ans.push_back(pq.top());
                pq.pop();
            }
            return ans;
        }
    private:
        struct Compare {
            bool operator()(const vector<int>& p, const vector<int>& q) {
                return p[0] * p[0] + p[1] * p[1] > q[0] * q[0] + q[1] * q[1];
            }
        };
    };
   
    时间复杂度：
        insert: O(logn)
        build: O(n)
        remove: O(logn) 
    

3.make_pair
    pair<int, int> p(1,1);
    pq.push(make_pair(p.second, p.first));
    或
    pq.push({p.second, p.first});
    
4.stoi & to_string
    stoi(str):string转int；
    to_string(i):int转string；

5.(expression) ? ++i : --j;
    3sum中需要根据当前的和sum与target之间的大小关系来选择是++start还是--end，那么可以利用这么一个小语句。
    (sum < target) ? ++start : --end;

6.vector 
    erase & find
        vector<int> vec;
        vec.erase(vec.begin()+i) : 删除index为i的元素
        vec.erase(vec.begin()+i, vec.begin()+j) : 删除index为i和j之间的元素，不包括元素j
        find(vec.begin(), vec.end(), x) != vec.end(): 看vec中是否包含x，如果不包含就返回vec.end()
    insert
        a.比如在头部插入 vec.insert(vec.begin(), val);
        b.vector_name.insert(position, size, val)
            size – It specifies the number of times a val is to be inserted at the specified position.
        c.vector_name.insert(position, iterator1 , iterator2)
            iterator1 – It specifies the starting position from which the elements are to be inserted.
            iterator2 – It specifies the ending position till which elements are to be inserted.
    
7.switch
    使用switch(state)时，state必须是可以唯一转换成integer的数据类型，比如int, char.所以并不可以直接用string作为state.最好写的时候还是用
    if-else.
    
8.lower_bound & upper_bound
    在378中使用到。
    ForwardIter lower_bound(ForwardIter first, ForwardIter last,const _Tp& val)算法返回一个非递减序列[first, last)中的第一个大于
    等于值val的位置。
    ForwardIter upper_bound(ForwardIter first, ForwardIter last, const _Tp& val)算法返回一个非递减序列[first, last)中第一个大于
    val的位置。
    
9.istringstream
    290中用到
    可用来分割string中的word。
    
    71题中分割string，分隔符为'/'，将每次分割的word存入到dir中。
    string dir;
    stringstream ss(path); （path是要进行分割的string）
    while(getline(ss, dir, '/'))

10.std::numeric_limits<T>::min
    Returns the minimum finite value representable by the numeric type T.
    示例： int mx = std::numeric_limits<T>::min();

11.string的一些操作函数
    isalnum 用来判断是否为字符或者数字
    
    string的初始化：
        string str(10, ' ');    这是将str初始化为10个空格，一定要记住，这里必须写成' '，而不能写成了''，''并不是一个字符。
    
12.set
    set是基于红黑树这一数据结构构建的，所以它的insert操作的最坏时间复杂度可以达到O(logn)，它的erase时间复杂度最坏可以达到O(logn)，但是平均时间
    复杂度为O(1).
    
13.deque
    基本操作：
        push_back()
        push_front()
        pop_back()
        pop_front()
        back()
        front() 
    时间复杂度均为O(1)        
    
10.*max_element
11.string.compare()
