发现有两类题很相似，就拿到一起比较和总结了。
第一类：给一个数组，数组中的数出现一次或两次(有一题是出现三次)，找出现一次的那个数。这种题一般是排除出现多次，找出现一次的元素，一般出现多次的数，通过
      位运算可以找到规律将其排除，那么这种题一般就用位运算去做，这类题有136. Single Number，137. Single Number II，260. Single Number III
第二类：给一个数组，数组中的数相较于第一类题有了一些限制，就是基本上要么是0~N-1，要么就是1~N，然后其中有些数出现一次，有些出现两次，然后找出出现两次的。
      这种题呢，有个不错的方法，442. Find All Duplicates in an Array中用到的，每次访问对其进行取反。
      当然这道题因为数组值的特性，可以使用cyclic swapping，这个方法的话，几乎可以拓展到所有的数组题中，只要它的值满足上述条件。
      cyclic swapping我们在这着重讲一下。
      class Solution {
      public:
          vector<int> findDuplicates(vector<int>& nums) {
              vector<int> res;
              for(int i = 0; i < nums.size();) {
                  int index = nums[i]-1;
                  if(nums[index] != index+1)  swap(nums[index], nums[i]);
                  else i++;
              }
              for(int i = 0; i < nums.size(); i++) {      
                  if(nums[i] != i+1)  res.push_back(nums[i]);
              }
              return res;
          }
      };
      还是以442为例，这道题中，第12-16行，是swap的整个过程。这个过程可以按照下面的方式进行理解。
      比如[2,3,4,3]，将数组中每个位子理解为链表中的一个node，将数组中的value，比如nums[0]的value为2，将它看成是一个指针，指向nums[1](1由2-1获得
      因为这个数组中的数字的范围是1~N，所以将它换成index的话，需要进行-1），那么这个数组就可以转化成类似于下面的这个链表。
      [0]-->[1]-->[2]-->[3]-->[2](中括号中的数字代表index），那么从[0]开始，如果nums[index] != index+1，就进行交换，这是什么意思呢，首先想
      一下，我们想要做什么，是将数字放到对的位置，因为这里是每个数取1~N，所以一个数i，它的正确位置就是[i-1]，也就是要让nums[i-1] = i，那么这对应到
      链表中是什么意思呢，nums[i-1]也就是node[i-1]的next指针，它指向谁呢，指向nums[i-1]，也就是说这个node自己形成了一个环。
      那么我们从[0]开始，如果不满足nums[index] != index+1，那就说明[index]这个位置上的数字位置不对，那么我们就进行swap，我们看swap之后，发生了
      什么改变，[0]指向[1]，然后发现[1]上的数字位置不正确，那么进行swap，将[0]上的数字放到[1]上，而之所以[0]会指向[1]，正因为[0]上的数字的正确位置
      就是[1]，那么其实swap之后，[1]上的数字必然是正确的，而交换后[0]上的不一定，所以还需要继续这个过程。
